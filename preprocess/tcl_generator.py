# Based on universal_synth.tcl
def generate_tcl(module_name : str, absolute_file_path : str):
    file = module_name + "_synth.tcl"
    f = open(file, 'w')
    intro = '''
# This script is automatically generated by the toolchain.
# This script processes the Verilog file using Yosys to generate
# an eblif file of the Verilog file's netlist with only d-flip flops
# and the basic logic gates of AND, NAND, OR, NOR, XOR
    '''
    f.write(intro)

    f.write("# bring yosys command into our script!\n")
    f.write("yosys -import\n")
    
    f.write("# Read the source file\n")
    f.write("read_verilog " + absolute_file_path + "\n")

    f.write("hierarchy -check -auto-top\n\n")

    f.write("synth -flatten -noalumacc -run coarse\n\n")
    f.write("# Splits all the multi-bit cells and nets into single bits\n")
    f.write("splitcells\nsplitnets -driver -ports\n\n")

    f.write("# Aigmap that replaces all the logic gates into AND, NOT, NAND\n")
    f.write("aigmap -nand\nopt -full\n\n")

    f.write("# Ran again because some muxes are not split just from the first command\n")
    f.write("splitcells\nsplitnets -driver -ports\n\n")
    
    f.write("# Optimization and cleaning process\n")
    f.write("opt -full\nclean\n")

    end = '''
    # print coarse synthesis report
    stat -width

    techmap
    abc -g AND,NAND,OR,NOR,XOR
    splitcells
    splitnets -driver -ports
    opt -full
    stat -width
    clean
    '''

    f.write(end)

    f.write("write_blif -conn ../benchmarks/" + module_name + ".eblif") 

if __name__ == "__main__":
    generate_tcl("stereovision0", "stereovision0.v")


